var version=function(e,a,n,t,i,l,r,d,s){"use strict";function o(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var g=o(a),c=o(n),u=o(s);const b={instanceVariable:"\n    {\n      instanceVariable(filter: {id: $id}) {\n        id\n        name {\n          languageCode\n          languageText\n        }\n        reverseLineageFieldInstanceVariable {\n          id\n          smart {\n            id\n            lineageDataset {\n              id\n              reverseUnitDataSetLineage {\n                id\n                name {\n                  languageCode\n                  languageText\n                }\n                description {\n                  languageCode\n                  languageText\n                }\n                version\n                administrativeStatus\n                valuation\n                createdBy\n                lastUpdatedBy\n                metadataSourcePath\n                shortName\n                temporalityType\n                dataSetState\n                dataSourcePath\n              }\n            }\n          }\n        }\n      }\n    }\n  ",representedVariable:"\n    {\n      representedVariable(filter: {id: $id}) {\n        id\n        name {\n          languageCode\n          languageText\n        }\n        reverseInstanceVariableRepresentedVariable {\n          id\n          name {\n            languageText\n            languageCode\n          }\n          reverseLineageFieldInstanceVariable {\n            id\n            smart {\n              id\n              lineageDataset {\n                id\n                reverseUnitDataSetLineage {\n                  id\n                  name {\n                    languageText\n                    languageCode\n                  }\n                  description {\n                    languageText\n                    languageCode\n                  }\n                  version\n                  administrativeStatus\n                  valuation\n                  createdBy\n                  lastUpdatedBy\n                  metadataSourcePath\n                  shortName\n                  temporalityType\n                  dataSetState\n                  dataSourcePath\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ",variable:"\n    {\n      variable(filter: {id: $id}) {\n        id\n        name {\n          languageCode\n          languageText\n        }\n        reverseRepresentedVariableVariable {\n          id\n          name {\n            languageText\n            languageCode\n          }\n          reverseInstanceVariableRepresentedVariable {\n            id\n            name {\n              languageText\n              languageCode\n            }\n            reverseLineageFieldInstanceVariable {\n              id\n              smart {\n                id\n                lineageDataset {\n                  id\n                  reverseUnitDataSetLineage {\n                    id\n                    name {\n                      languageText\n                      languageCode\n                    }\n                    description {\n                      languageText\n                      languageCode\n                    }\n                    version\n                    administrativeStatus\n                    valuation\n                    createdBy\n                    lastUpdatedBy\n                    metadataSourcePath\n                    shortName\n                    temporalityType\n                    dataSetState\n                    dataSourcePath\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  "},m="/health/ready",h="instanceVariable",p="representedVariable",V="variable",f="name",v={DATA_TYPE:["variable","dataset"],DATASET_TYPES:["unitDataSet"],VARIABLE_TYPES:["instanceVariable","representedVariable","variable"],SMART:["smart"],UNIT_DATA_SET:["lineageDataset","reverseUnitDataSetLineage"]},E={LF_IV:"reverseLineageFieldInstanceVariable",IV_RV:"reverseInstanceVariableRepresentedVariable",RV_V:"reverseRepresentedVariableVariable",UDS_L:"reverseUnitDataSetLineage"},S=new u.default({lightness:[.35,.5,.65]}),T={dataset:"square",instanceVariable:"circle",representedVariable:"diamond",variable:"star"},y=(e,a,n,t)=>a.reduce(((a,l)=>{const r={nodes:[],links:[]},d=(e,a)=>{0!==e.length&&e.forEach((e=>{const n=i.getNestedObject(e,v.SMART);void 0!==n&&0!==n.length&&n.forEach((e=>{const n=i.getNestedObject(e,v.UNIT_DATA_SET);void 0!==n&&0!==n.length&&n.forEach((e=>{r.nodes.push({id:e.id,nodeLabelName:i.getLocalizedGsimObjectText(t,e[f]),color:S.hex(e.id),symbolType:T.dataset}),r.links.push({source:a,target:e.id})}))}))}))},s=(e,a)=>{0!==e.length&&e.forEach((e=>{r.nodes.push({id:e.id,nodeLabelName:i.getLocalizedGsimObjectText(t,e[f]),color:S.hex(e.id),symbolType:T.instanceVariable}),r.links.push({source:a,target:e.id}),d(e[E.LF_IV],e.id)}))};switch(n){case h:const a=l[n][E.LF_IV];d(a,e);break;case p:const o=l[n][E.IV_RV];s(o,e);break;case V:((e,a)=>{0!==e.length&&e.forEach((e=>{r.nodes.push({id:e.id,nodeLabelName:i.getLocalizedGsimObjectText(t,e[f]),color:S.hex(e.id),symbolType:T.representedVariable}),r.links.push({source:a,target:e.id}),s(e[E.IV_RV],e.id)}))})(l[n][E.RV_V],e)}return r}),{}),L={API_ERROR_MESSAGE:{en:"Something went wrong, check settings",nb:"Noe gikk galt, sjekk innstillingene"},HEADER:{en:"Lineage Viewer",nb:"Sporingsvisning"},LEGEND:["instanceVariable","","representedVariable","dataset","variable"]},x=new u.default({lightness:[.35,.5,.65]});function C({dataId:e,dataType:n,language:s}){const[o,c]=a.useState(!1),[u,m]=a.useState(""),[h]=a.useState({nodeHighlightBehavior:!0,automaticRearrangeAfterDropNode:!1,staticGraph:!1,node:{labelProperty:e=>""===e.nodeLabelName||"-"===e.nodeLabelName?e.id:e.nodeLabelName,size:300,highlightStrokeColor:"blue",fontSize:14,highlightFontSize:14,highlightFontWeight:"bold"},link:{highlightColor:"lightblue"},d3:{gravity:-1500,linkLength:200},width:(.75*window.screen.width*.96).toFixed(0),height:600});const[p,{loading:V,error:v,data:E}]=l.useManualQuery("dataset"!==n?b[n]:"\n  {\n    unitDataSet(filter: {id: $id}) {\n      id\n      name {\n        languageCode\n        languageText\n      }\n      description {\n        languageCode\n        languageText\n      }\n      lineage {\n        id\n        reverseLineageFieldLineageDataset {\n          id\n          smart {\n            id\n            instanceVariable {\n              id\n              name {\n                languageText\n                languageCode\n              }\n              description {\n                languageCode\n                languageText\n              }\n              representedVariable {\n                id\n                name {\n                  languageCode\n                  languageText\n                }\n                description {\n                  languageCode\n                  languageText\n                }\n                variable {\n                  id\n                  name {\n                    languageCode\n                    languageText\n                  }\n                  description {\n                    languageCode\n                    languageText\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n",{variables:{id:e}});a.useEffect((()=>{p().then((()=>null))}),[p]),a.useEffect((()=>{if(!V&&!v&&void 0!==E)if("dataset"!==n){const a=y(e,E,n,s),t={nodes:a.nodes.concat([{id:e,nodeLabelName:i.getLocalizedGsimObjectText(s,E[0][n][f]),color:x.hex(e),size:1e3,fontSize:20,highlightFontSize:20,symbolType:T[n]}]).filter(((e,a,n)=>n.findIndex((a=>a.id===e.id))===a)),links:a.links};c(t)}else{console.log(E);const a=((e,a,n)=>a.reduce(((a,t)=>{const l={nodes:[],links:[]},r=i.getNestedObject(t,["unitDataSet","lineage","reverseLineageFieldLineageDataset"]);return void 0!==r&&0!==r.length&&r.forEach((a=>{a.smart.forEach((a=>{null!==a&&(a.hasOwnProperty("instanceVariable")&&null!==a.instanceVariable?(l.nodes.push({id:a.instanceVariable.id,nodeLabelName:i.getLocalizedGsimObjectText(n,a.instanceVariable.name),color:S.hex(a.instanceVariable.id),symbolType:T.instanceVariable}),l.links.push({source:e,target:a.instanceVariable.id}),a.instanceVariable.hasOwnProperty("representedVariable")&&(l.nodes.push({id:a.instanceVariable.representedVariable.id,nodeLabelName:i.getLocalizedGsimObjectText(n,a.instanceVariable.representedVariable.name),color:S.hex(a.instanceVariable.representedVariable.id),symbolType:T.representedVariable}),l.links.push({source:a.instanceVariable.id,target:a.instanceVariable.representedVariable.id}),a.instanceVariable.representedVariable.hasOwnProperty("variable")&&(l.nodes.push({id:a.instanceVariable.representedVariable.variable.id,nodeLabelName:i.getLocalizedGsimObjectText(n,a.instanceVariable.representedVariable.variable.name),color:S.hex(a.instanceVariable.representedVariable.variable.id),symbolType:T.variable}),l.links.push({source:a.instanceVariable.representedVariable.id,target:a.instanceVariable.representedVariable.variable.id})))):(l.nodes.push({id:a.id,nodeLabelName:i.getLocalizedGsimObjectText(n,a.name),color:S.hex(a.id),symbolType:T.instanceVariable}),l.links.push({source:e,target:a.id})))}))})),l}),{}))(e,E,s),n={nodes:a.nodes.concat([{id:e,nodeLabelName:i.getLocalizedGsimObjectText(s,E[0].unitDataSet.name),color:x.hex(e),size:1e3,fontSize:20,highlightFontSize:20,symbolType:T.dataset}]).filter(((e,a,n)=>n.findIndex((a=>a.id===e.id))===a)),links:a.links};c(n),console.log(a)}}),[V,v,E,e,n,s]);return g.default.createElement(g.default.Fragment,null,g.default.createElement(t.Header,{content:`Sporing av ${e} (${n})`}),o&&g.default.createElement(t.Grid,null,g.default.createElement(t.Grid.Column,{width:12},g.default.createElement(t.Segment,{raised:!0},g.default.createElement(r.Graph,{id:"graph-id",data:o,config:h,onClickNode:e=>m(e)}),g.default.createElement(t.Rail,{attached:!0,internal:!0,position:"right",style:{height:"30%"}},g.default.createElement(t.Segment,null,g.default.createElement(t.Grid,null,[4,2,0,3].map((e=>g.default.createElement(t.Grid.Row,{key:e,style:{paddingTop:"0.5rem",paddingBottom:"0.5rem"}},g.default.createElement(t.Grid.Column,{width:2},g.default.createElement("svg",{width:"30",height:"30",version:"1.1",xmlns:"http://www.w3.org/2000/svg"},g.default.createElement("path",{transform:"translate(15, 15)",style:{fill:i.SSB_COLORS.GREY},d:d.symbol(d.symbols[e],300)()}))),g.default.createElement(t.Grid.Column,{width:14,verticalAlign:"middle"},"= "+L.LEGEND[e]))))))))),g.default.createElement(t.Grid.Column,{width:4},g.default.createElement(t.Segment,{raised:!0},"Clicked node: "+u))))}return e.LineageViewer=function({restApi:e,language:n}){const[l,r]=a.useState(!1),[d,s]=a.useState("Variable_DUMMY"),[o,u]=a.useState(v.VARIABLE_TYPES[2]),[{loading:b,error:h}]=c.default(`${e}${m}`,{useCache:!1});return a.useEffect((()=>{if(b||h)r(!1);else{r(!0);const e=window.location.search,a=new URLSearchParams(e),n=a.get("id"),t=a.get("type");n&&null!==t&&(s(n),u(t))}}),[h,b]),g.default.createElement(g.default.Fragment,null,g.default.createElement(t.Grid,null,g.default.createElement(t.Grid.Column,{width:3},g.default.createElement(t.Input,{fluid:!0,value:d,onFocus:e=>e.target.select(),onKeyPress:({key:e})=>"Enter"===e&&r(!0),onChange:(e,{value:a})=>{r(!1),s(a)}})),g.default.createElement(t.Grid.Column,{width:13},g.default.createElement(t.Dropdown,{selection:!0,value:o,options:v.VARIABLE_TYPES.map((e=>({key:e,text:e,value:e}))).concat([{key:"dataset",text:"dataset",value:"dataset"}]),onChange:(e,{value:a})=>{r(!1),u(a)}}))),g.default.createElement(t.Divider,{hidden:!0}),g.default.createElement(t.Button,{primary:!0,content:"Go",onClick:()=>r(!0)}),b?g.default.createElement(t.Loader,{active:!0,inline:"centered"}):h?g.default.createElement(i.ErrorMessage,{error:L.API_ERROR_MESSAGE[n],language:n}):l&&g.default.createElement(C,{dataId:d,dataType:o,language:n}))},Object.defineProperty(e,"__esModule",{value:!0}),e}({},React,useAxios,semanticUiReact,daplaJsUtilities,graphqlHooks,reactD3Graph,d3Shape,ColorHash);
